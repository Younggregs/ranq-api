# Generated by Django 3.2.19 on 2023-06-20 15:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ranq_app.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('name', models.CharField(max_length=100)),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='EmailToken',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('type', models.CharField(max_length=50)),
                ('token', models.CharField(max_length=100)),
                ('expiry_date', models.DateField(default=django.utils.timezone.now)),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('contestants', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=150), size=None)),
                ('voters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=150), size=None)),
                ('duration', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('public', 'public'), ('private', 'private')], default=ranq_app.models.TypeEnum['public'], max_length=50)),
                ('status', models.CharField(choices=[('ongoing', 'ongoing'), ('completed', 'completed')], default=ranq_app.models.StatusEnum['ongoing'], max_length=50)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('rank_value', models.IntegerField()),
                ('contestant_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ranq_app.contestant')),
                ('poll_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ranq_app.poll')),
                ('voter_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ranq_app.voter')),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('rank_raise_bar', models.TextField()),
                ('popular_vote', models.TextField()),
                ('poll_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ranq_app.poll')),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.CreateModel(
            name='PrivateVoter',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ranq_app.basemodel')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('poll_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ranq_app.poll')),
            ],
            bases=('ranq_app.basemodel',),
        ),
        migrations.AddField(
            model_name='poll',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contestant',
            name='poll_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ranq_app.poll'),
        ),
    ]
